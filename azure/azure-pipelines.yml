# Default pipeline to build, check and test libhtp-rs
#
# This will also run integration tests with cyberdeck and suricata.

trigger:
  batch: true
  branches:
    include:
      - main

pr:
- main

resources:
  repositories:
  - repository: suricata
    type: github
    name: CybercentreCanada/suricata-internal
    endpoint: CybercentreCanada
    ref: refs/heads/libhtp-rs
  - repository: cyberdeck
    type: github
    name: CybercentreCanada/cyberdeck
    endpoint: CybercentreCanada
    ref: refs/heads/libhtp-rs-fixes
  - repository: suricata-verify
    type: github
    name: CybercentreCanada/suricata-verify-internal
    endpoint: CybercentreCanada
    ref: refs/heads/libhtp-rs

jobs:
- job: test_libhtp
  timeoutInMinutes: 180
  displayName: Test Libhtp
  pool: nbs-gcc-9-autoscaling-builders
  steps:
    #
    # Libhtp Steps
    # ==============
    - checkout: self
      path: libhtp-rs

    #
    # Use cargo install path
    - script: echo "##vso[task.setvariable variable=PATH;]$PATH:/usr/local/cargo/bin"
      displayName: set path

    #
    # Give builder access to cached rust install
    - script: sudo chown -R AzDevOps /usr/local/cargo /usr/local/rustup
      displayName: chown cargo dir

    #
    # Get the package version
    - script: echo "##vso[task.setvariable variable=version]$(make version)"
      displayName: package version
      workingDirectory: $(Agent.BuildDirectory)/libhtp-rs

    #
    # Setup dependencies required to build libhtp-rs
    - script: |
        rustup override set stable
      displayName: setup
      workingDirectory: $(Agent.BuildDirectory)/libhtp-rs

    #
    # QA Steps
    # ========

    #
    # Check code formatting differences
    - script: cargo fmt --all -- --check
      displayName: rustfmt
      workingDirectory: $(Agent.BuildDirectory)/libhtp-rs

    #
    # Check linting warnings
    - script: cargo clippy --workspace --all-targets --all-features -- -D warnings
      displayName: Run Clippy
      workingDirectory: $(Agent.BuildDirectory)/libhtp-rs

    #
    # Build project
    #TODO: remove this when added to the main builder
    - script: rustup update 1.56.0
      displayName: Install msrv

    #
    # First, with the minimum supported rust version
    - script: cargo +1.56.0 build --workspace --all-targets --all-features --release
      displayName: build (msrv)
      workingDirectory: $(Agent.BuildDirectory)/libhtp-rs

    #
    # Build stable version
    - script: cargo build --workspace --all-targets --all-features --release
      displayName: build (stable)
      workingDirectory: $(Agent.BuildDirectory)/libhtp-rs

    #
    # Run the doc tests
    # Needed until this issue is fixed: https://github.com/rust-lang/cargo/issues/6669
    - script: cargo test --workspace --doc --all-features
      displayName: run doc tests
      workingDirectory: $(Agent.BuildDirectory)/libhtp-rs

    #
    # Build documentation
    - script: cargo doc --workspace --all-features --no-deps
      displayName: cargo doc
      workingDirectory: $(Agent.BuildDirectory)/libhtp-rs

    #
    # Publish documentation
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: $(Agent.BuildDirectory)/libhtp-rs/target/doc
        includeRootFolder: false
        archiveType: tar
        tarCompression: gz
        archiveFile: $(Build.ArtifactStagingDirectory)/libhtp-doc-$(version).tar.gz
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)/libhtp-doc-$(version).tar.gz
        artifactName: libhtp-$(version).tar.gz

    # Run the unit tests
    - script: cargo test --workspace --all-targets --all-features
      displayName: run tests
      workingDirectory: $(Agent.BuildDirectory)/libhtp-rs

    #
    # Use .Net Core SDK for code coverage report generation
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 3.1.402
        installationPath: $(Agent.ToolsDirectory)/dotnet

    #
    # Generate the code coverage report for Azure
    - script: |
         dotnet tool install -g dotnet-reportgenerator-globaltool
         reportgenerator -reports:./coverage.xml -targetdir:./coverage/ "-reporttypes:HtmlInline_AzurePipelines;Cobertura"
      displayName: generate code coverage report
      workingDirectory: $(Agent.BuildDirectory)/libhtp-rs
      continueOnError: True

    #
    # Publish the Azure code coverage results
    - task: PublishCodeCoverageResults@1
      displayName: publish code coverage
      continueOnError: True
      inputs:
       codeCoverageTool: Cobertura
       summaryFileLocation: '$(Agent.BuildDirectory)/libhtp-rs/coverage.xml'
       reportDirectory: '$(Agent.BuildDirectory)/libhtp-rs/coverage/'

    #
    # Run the benchmarks
    - script: |
        rustup override set stable
        cargo bench
      displayName: bench
      workingDirectory: $(Agent.BuildDirectory)/libhtp-rs

    #
    # Build rpm
    - script: make rpm
      displayName: rpm
      workingDirectory: $(Agent.BuildDirectory)/libhtp-rs

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Agent.BuildDirectory)/libhtp-rs/target/centos/SOURCES/libhtp-$(version).tar.gz
        artifactName: libhtp-$(version).tar.gz

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Agent.BuildDirectory)/libhtp-rs/target/centos/RPMS/x86_64/libhtp-$(version)-1.x86_64.rpm
        artifactName: libhtp-$(version)-1.x86_64.rpm

    #
    # Install libhtp-rs
    #
    # TODO: Link to cyberdeck without installing RPM to avoid polluting the global environment
    - script: |
        sudo yum remove -y libhtp
        sudo yum install -y target/centos/RPMS/x86_64/libhtp*.rpm
      displayName: install
      workingDirectory: $(Agent.BuildDirectory)/libhtp-rs

    #
    # Suricata Steps
    # ==============

    #
    # Checkout Suricata
    - checkout: suricata
      path: suricata

    #
    # Configure suricata
    #
    # The symlink should prevent us from having to rebuild libhtp-rs.
    - script: |
        ln -s $(Agent.BuildDirectory)/libhtp-rs libhtp
        ./autogen.sh
        $(Agent.BuildDirectory)/suricata/configure --enable-unittests
      displayName: "suricata: configure"
      workingDirectory: $(Agent.BuildDirectory)/suricata

    #
    # Build suricata
    - script: |
        make -j $(nproc)
      displayName: "suricata: build"
      workingDirectory: $(Agent.BuildDirectory)/suricata

    #
    # Test suricata
    - script: |
        sudo mkdir -p /var/log/suricata
        sudo chown root:adm /var/log/suricata
        sudo chmod 775 /var/log/suricata
        rm -f /var/log/suricata/boo.txt
        ./src/suricata -u
      displayName: "suricata: test"
      workingDirectory: $(Agent.BuildDirectory)/suricata

    #
    # Suricata-Verify Steps
    # ==============

    #
    # Checkout suricata-verify
    - checkout: suricata-verify
      path: suricata-verify

    #
    # Test suricata-verify
    - script: |
        python3 $(Agent.BuildDirectory)/suricata-verify/run.py
      displayName: "suricata-verify: test"
      workingDirectory: $(Agent.BuildDirectory)/suricata

    #
    # Cyberdeck Steps
    # ==============

    #
    # Checkout cyberdeck
    - checkout: cyberdeck
      path: cyberdeck

    #
    # Configure cyberdeck
    #
    # This will configure cyberdeck outside of its source tree.
    # TODO: install ninja-build on the box directly with its config environment
    # TODO: link to libhtp-rs without installing RPM to avoid polluting the global environment
    - script: |
        source /opt/gcc-9/enable
        sudo rm -rf /opt/gcc-9/root/usr/include/htp/
        sudo rm -rf /opt/gcc-9/root/usr/lib/libhtp*
        sudo yum install -y ninja-build
        mkdir cyberdeck_build
        cd cyberdeck_build
        cmake3 -GNinja \
        -DTARGET_NATIVE_ARCH=Off \
        -DCMAKE_BUILD_TYPE=Release \
        -DENABLE_SAWP=Off \
        -DENABLE_MANPAGES=Off \
        -DENABLE_STREAMMAP=Off \
        -DENABLE_SNF=Off \
        -DENABLE_HTP=On \
        -DENABLE_TESTS=On \
        $(Agent.BuildDirectory)/cyberdeck
      displayName: "cyberdeck: configure" 
      workingDirectory: $(Agent.BuildDirectory)

    #
    # Build cyberdeck
    - script: |
        ninja-build
      displayName: "cyberdeck: build" 
      workingDirectory: $(Agent.BuildDirectory)/cyberdeck_build

    #
    # Test cyberdeck
    - script: ice/HTTP/test/http_unit_tests
      displayName: "cyberdeck: test http"
      workingDirectory: $(Agent.BuildDirectory)/cyberdeck_build
